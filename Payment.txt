import React, { useState, useEffect, useRef } from "react";
import { useSelector, useDispatch } from "react-redux";
import { useStripe, useElements, CardElement } from "@stripe/react-stripe-js";
import MetaData from "../../more/Metadata";
import { Typography } from "@material-ui/core";
import axios from "axios";
import { createOrder, clearErrors } from "../../actions/OrderAction";
import CheckoutSteps from "./CheckoutSteps";
// Other imports and components

const Payment = ({ history }) => {
const orderInfo = JSON.parse(sessionStorage.getItem("orderInfo"));
const dispatch = useDispatch();
  const stripe = useStripe();
  const elements = useElements();
  const payBtn = useRef(null);

  const { user } = useSelector((state) => state.user);
  const { shippingInfo, cartItems } = useSelector((state) => state.cart);

  const [error, setError] = useState(null);
  const order = {
    shippingInfo,
    orderItems: cartItems,
    itemsPrice: orderInfo.subtotal,
    shippingPrice: orderInfo.shippingCharges,
    totalPrice: orderInfo.totalPrice,
  };


  const handleSubmit = async (e) => {
    e.preventDefault();

    payBtn.current.disabled = true;

    if (!stripe || !elements) {
      return;
    }

    const cardElement = elements.getElement(CardElement);

    try {
      const { data } = await axios.post("/api/v2/payment/process", {
        amount: Math.round(orderInfo.totalPrice * 100),
      });

      const clientSecret = data.client_secret;

      const result = await stripe.confirmCardPayment(clientSecret, {
        payment_method: {
          card: cardElement,
          billing_details: {
            name: user.name,
            email: user.email,
            address: {
              line1: shippingInfo.address,
              city: shippingInfo.city,
              state: shippingInfo.state,
              postal_code: shippingInfo.postalCode,
              country: shippingInfo.country,
            },
          },
        },
      });

      if (result.error) {
        setError(result.error.message);
        payBtn.current.disabled = false;
      } else {
        if (result.paymentIntent.status === "succeeded") {
          dispatch(createOrder(order));
          history.push("/success");
        } else {
          setError("Payment failed.");
          payBtn.current.disabled = false;
        }
      }
    } catch (error) {
      console.error(error);
      setError("An error occurred while processing your payment.");
      payBtn.current.disabled = false;
    }
  };

  return (
  <div>
      <MetaData title="Payment" /> {/* Add MetaData component */}
      <CheckoutSteps activeStep={2} /> {/* Add CheckoutSteps component */}
      <div className="paymentContainer">
        <form onSubmit={handleSubmit}>
          <div className="paymentForm">
            <CardElement
              options={{
                style: {
                  base: {
                    fontSize: "16px",
                    fontFamily: "Arial, sans-serif",
                  },
                },
              }}
            />
            {error && <div className="error-message">{error}</div>}
          </div>
          <button
            type="submit"
            ref={payBtn}
            className="paymentFormBtn"
          >
            Pay - ${orderInfo && orderInfo.totalPrice}
          </button>
        </form>
      </div>
    </div>
  );
};

export default Payment;
